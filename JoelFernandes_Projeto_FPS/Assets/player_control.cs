//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/player_control.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player_control: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player_control()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""player_control"",
    ""maps"": [
        {
            ""name"": ""locomotion"",
            ""id"": ""48921eaf-2fe1-470e-9b5b-33ff28833767"",
            ""actions"": [
                {
                    ""name"": ""walk"",
                    ""type"": ""Value"",
                    ""id"": ""5d997556-9be6-4d36-b447-16d3c293d5b3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""589e74da-1c37-46f4-b3f0-879de02d4c58"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""76163fef-3943-40c0-9962-edc457042f10"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1c185405-531e-4944-9715-2e98559ef482"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fca1e513-4d6e-4142-84af-914597e6acf1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""65008fe8-6462-4d89-ac23-3a6afd8c140e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector controller"",
                    ""id"": ""54b8d8f1-5a66-4029-b7d0-9c9bf356cd70"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a5950582-d650-4b3b-9750-9411d581c799"",
                    ""path"": ""<XInputController>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c64f5928-0d19-483f-9f09-dd4dcd3bfafa"",
                    ""path"": ""<XInputController>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ba6dfef9-3f65-41dc-9438-ce3e809ffe8d"",
                    ""path"": ""<XInputController>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ed600d2c-315b-4cd5-ae92-27b50ab0710a"",
                    ""path"": ""<XInputController>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""save/load"",
            ""id"": ""dfa67ac5-29c5-4718-a07e-29317cf45f8f"",
            ""actions"": [
                {
                    ""name"": ""save"",
                    ""type"": ""Button"",
                    ""id"": ""a09b6ef9-2050-4be1-8d42-bcf1d79c600b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""load"",
                    ""type"": ""Button"",
                    ""id"": ""a1f5bb64-aff1-447a-901a-4e32e6a917df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ef70102d-5d47-400d-a031-37140758f8fe"",
                    ""path"": ""<Keyboard>/f5"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""save"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8a19597-b9af-481a-b59e-32f45366ffec"",
                    ""path"": ""<Keyboard>/f6"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""load"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // locomotion
        m_locomotion = asset.FindActionMap("locomotion", throwIfNotFound: true);
        m_locomotion_walk = m_locomotion.FindAction("walk", throwIfNotFound: true);
        // save/load
        m_saveload = asset.FindActionMap("save/load", throwIfNotFound: true);
        m_saveload_save = m_saveload.FindAction("save", throwIfNotFound: true);
        m_saveload_load = m_saveload.FindAction("load", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // locomotion
    private readonly InputActionMap m_locomotion;
    private List<ILocomotionActions> m_LocomotionActionsCallbackInterfaces = new List<ILocomotionActions>();
    private readonly InputAction m_locomotion_walk;
    public struct LocomotionActions
    {
        private @Player_control m_Wrapper;
        public LocomotionActions(@Player_control wrapper) { m_Wrapper = wrapper; }
        public InputAction @walk => m_Wrapper.m_locomotion_walk;
        public InputActionMap Get() { return m_Wrapper.m_locomotion; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LocomotionActions set) { return set.Get(); }
        public void AddCallbacks(ILocomotionActions instance)
        {
            if (instance == null || m_Wrapper.m_LocomotionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LocomotionActionsCallbackInterfaces.Add(instance);
            @walk.started += instance.OnWalk;
            @walk.performed += instance.OnWalk;
            @walk.canceled += instance.OnWalk;
        }

        private void UnregisterCallbacks(ILocomotionActions instance)
        {
            @walk.started -= instance.OnWalk;
            @walk.performed -= instance.OnWalk;
            @walk.canceled -= instance.OnWalk;
        }

        public void RemoveCallbacks(ILocomotionActions instance)
        {
            if (m_Wrapper.m_LocomotionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILocomotionActions instance)
        {
            foreach (var item in m_Wrapper.m_LocomotionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LocomotionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LocomotionActions @locomotion => new LocomotionActions(this);

    // save/load
    private readonly InputActionMap m_saveload;
    private List<ISaveloadActions> m_SaveloadActionsCallbackInterfaces = new List<ISaveloadActions>();
    private readonly InputAction m_saveload_save;
    private readonly InputAction m_saveload_load;
    public struct SaveloadActions
    {
        private @Player_control m_Wrapper;
        public SaveloadActions(@Player_control wrapper) { m_Wrapper = wrapper; }
        public InputAction @save => m_Wrapper.m_saveload_save;
        public InputAction @load => m_Wrapper.m_saveload_load;
        public InputActionMap Get() { return m_Wrapper.m_saveload; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SaveloadActions set) { return set.Get(); }
        public void AddCallbacks(ISaveloadActions instance)
        {
            if (instance == null || m_Wrapper.m_SaveloadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SaveloadActionsCallbackInterfaces.Add(instance);
            @save.started += instance.OnSave;
            @save.performed += instance.OnSave;
            @save.canceled += instance.OnSave;
            @load.started += instance.OnLoad;
            @load.performed += instance.OnLoad;
            @load.canceled += instance.OnLoad;
        }

        private void UnregisterCallbacks(ISaveloadActions instance)
        {
            @save.started -= instance.OnSave;
            @save.performed -= instance.OnSave;
            @save.canceled -= instance.OnSave;
            @load.started -= instance.OnLoad;
            @load.performed -= instance.OnLoad;
            @load.canceled -= instance.OnLoad;
        }

        public void RemoveCallbacks(ISaveloadActions instance)
        {
            if (m_Wrapper.m_SaveloadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISaveloadActions instance)
        {
            foreach (var item in m_Wrapper.m_SaveloadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SaveloadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SaveloadActions @saveload => new SaveloadActions(this);
    public interface ILocomotionActions
    {
        void OnWalk(InputAction.CallbackContext context);
    }
    public interface ISaveloadActions
    {
        void OnSave(InputAction.CallbackContext context);
        void OnLoad(InputAction.CallbackContext context);
    }
}
