//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/player_control.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player_control: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player_control()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""player_control"",
    ""maps"": [
        {
            ""name"": ""locomotion"",
            ""id"": ""48921eaf-2fe1-470e-9b5b-33ff28833767"",
            ""actions"": [
                {
                    ""name"": ""walk"",
                    ""type"": ""Value"",
                    ""id"": ""5d997556-9be6-4d36-b447-16d3c293d5b3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""eb2a38de-1073-41f8-adec-b1af43938bad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""hook"",
                    ""type"": ""Button"",
                    ""id"": ""57ab58ae-2210-4f26-85e8-c98ec32d4576"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""sprint"",
                    ""type"": ""Button"",
                    ""id"": ""b0505afa-b2f7-4b20-84b3-2d2c2f235f83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""589e74da-1c37-46f4-b3f0-879de02d4c58"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""76163fef-3943-40c0-9962-edc457042f10"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1c185405-531e-4944-9715-2e98559ef482"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fca1e513-4d6e-4142-84af-914597e6acf1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""65008fe8-6462-4d89-ac23-3a6afd8c140e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector controller"",
                    ""id"": ""54b8d8f1-5a66-4029-b7d0-9c9bf356cd70"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a5950582-d650-4b3b-9750-9411d581c799"",
                    ""path"": ""<XInputController>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c64f5928-0d19-483f-9f09-dd4dcd3bfafa"",
                    ""path"": ""<XInputController>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ba6dfef9-3f65-41dc-9438-ce3e809ffe8d"",
                    ""path"": ""<XInputController>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ed600d2c-315b-4cd5-ae92-27b50ab0710a"",
                    ""path"": ""<XInputController>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""60508386-019a-4af2-867e-0fe3f8639be8"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42bcd466-f058-4bd5-94f5-eff769d9b554"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""hook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bfaf86a8-1d35-42a1-b819-3b29e1335d99"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""save/load"",
            ""id"": ""dfa67ac5-29c5-4718-a07e-29317cf45f8f"",
            ""actions"": [
                {
                    ""name"": ""save"",
                    ""type"": ""Button"",
                    ""id"": ""a09b6ef9-2050-4be1-8d42-bcf1d79c600b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""load"",
                    ""type"": ""Button"",
                    ""id"": ""a1f5bb64-aff1-447a-901a-4e32e6a917df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ef70102d-5d47-400d-a031-37140758f8fe"",
                    ""path"": ""<Keyboard>/f5"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""save"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8a19597-b9af-481a-b59e-32f45366ffec"",
                    ""path"": ""<Keyboard>/f6"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""load"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""actions"",
            ""id"": ""471b81d0-f38f-4724-906d-2adf5aabfe91"",
            ""actions"": [
                {
                    ""name"": ""shot"",
                    ""type"": ""Button"",
                    ""id"": ""dc84b984-5213-4390-a449-826e3394798a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""taunt"",
                    ""type"": ""Button"",
                    ""id"": ""b19c8adb-7cbd-4eeb-b16d-aecbbb727d16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""reload"",
                    ""type"": ""Button"",
                    ""id"": ""84225956-dfe2-4330-aac0-7deabf8c6904"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""228c0b38-c37c-4786-953c-bd1691a32867"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""shot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17125f24-e4f4-4950-b29f-0ba1d16f5450"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""taunt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9581b74-b45c-4b24-afc6-db83072cfd42"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // locomotion
        m_locomotion = asset.FindActionMap("locomotion", throwIfNotFound: true);
        m_locomotion_walk = m_locomotion.FindAction("walk", throwIfNotFound: true);
        m_locomotion_jump = m_locomotion.FindAction("jump", throwIfNotFound: true);
        m_locomotion_hook = m_locomotion.FindAction("hook", throwIfNotFound: true);
        m_locomotion_sprint = m_locomotion.FindAction("sprint", throwIfNotFound: true);
        // save/load
        m_saveload = asset.FindActionMap("save/load", throwIfNotFound: true);
        m_saveload_save = m_saveload.FindAction("save", throwIfNotFound: true);
        m_saveload_load = m_saveload.FindAction("load", throwIfNotFound: true);
        // actions
        m_actions = asset.FindActionMap("actions", throwIfNotFound: true);
        m_actions_shot = m_actions.FindAction("shot", throwIfNotFound: true);
        m_actions_taunt = m_actions.FindAction("taunt", throwIfNotFound: true);
        m_actions_reload = m_actions.FindAction("reload", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // locomotion
    private readonly InputActionMap m_locomotion;
    private List<ILocomotionActions> m_LocomotionActionsCallbackInterfaces = new List<ILocomotionActions>();
    private readonly InputAction m_locomotion_walk;
    private readonly InputAction m_locomotion_jump;
    private readonly InputAction m_locomotion_hook;
    private readonly InputAction m_locomotion_sprint;
    public struct LocomotionActions
    {
        private @Player_control m_Wrapper;
        public LocomotionActions(@Player_control wrapper) { m_Wrapper = wrapper; }
        public InputAction @walk => m_Wrapper.m_locomotion_walk;
        public InputAction @jump => m_Wrapper.m_locomotion_jump;
        public InputAction @hook => m_Wrapper.m_locomotion_hook;
        public InputAction @sprint => m_Wrapper.m_locomotion_sprint;
        public InputActionMap Get() { return m_Wrapper.m_locomotion; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LocomotionActions set) { return set.Get(); }
        public void AddCallbacks(ILocomotionActions instance)
        {
            if (instance == null || m_Wrapper.m_LocomotionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LocomotionActionsCallbackInterfaces.Add(instance);
            @walk.started += instance.OnWalk;
            @walk.performed += instance.OnWalk;
            @walk.canceled += instance.OnWalk;
            @jump.started += instance.OnJump;
            @jump.performed += instance.OnJump;
            @jump.canceled += instance.OnJump;
            @hook.started += instance.OnHook;
            @hook.performed += instance.OnHook;
            @hook.canceled += instance.OnHook;
            @sprint.started += instance.OnSprint;
            @sprint.performed += instance.OnSprint;
            @sprint.canceled += instance.OnSprint;
        }

        private void UnregisterCallbacks(ILocomotionActions instance)
        {
            @walk.started -= instance.OnWalk;
            @walk.performed -= instance.OnWalk;
            @walk.canceled -= instance.OnWalk;
            @jump.started -= instance.OnJump;
            @jump.performed -= instance.OnJump;
            @jump.canceled -= instance.OnJump;
            @hook.started -= instance.OnHook;
            @hook.performed -= instance.OnHook;
            @hook.canceled -= instance.OnHook;
            @sprint.started -= instance.OnSprint;
            @sprint.performed -= instance.OnSprint;
            @sprint.canceled -= instance.OnSprint;
        }

        public void RemoveCallbacks(ILocomotionActions instance)
        {
            if (m_Wrapper.m_LocomotionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILocomotionActions instance)
        {
            foreach (var item in m_Wrapper.m_LocomotionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LocomotionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LocomotionActions @locomotion => new LocomotionActions(this);

    // save/load
    private readonly InputActionMap m_saveload;
    private List<ISaveloadActions> m_SaveloadActionsCallbackInterfaces = new List<ISaveloadActions>();
    private readonly InputAction m_saveload_save;
    private readonly InputAction m_saveload_load;
    public struct SaveloadActions
    {
        private @Player_control m_Wrapper;
        public SaveloadActions(@Player_control wrapper) { m_Wrapper = wrapper; }
        public InputAction @save => m_Wrapper.m_saveload_save;
        public InputAction @load => m_Wrapper.m_saveload_load;
        public InputActionMap Get() { return m_Wrapper.m_saveload; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SaveloadActions set) { return set.Get(); }
        public void AddCallbacks(ISaveloadActions instance)
        {
            if (instance == null || m_Wrapper.m_SaveloadActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SaveloadActionsCallbackInterfaces.Add(instance);
            @save.started += instance.OnSave;
            @save.performed += instance.OnSave;
            @save.canceled += instance.OnSave;
            @load.started += instance.OnLoad;
            @load.performed += instance.OnLoad;
            @load.canceled += instance.OnLoad;
        }

        private void UnregisterCallbacks(ISaveloadActions instance)
        {
            @save.started -= instance.OnSave;
            @save.performed -= instance.OnSave;
            @save.canceled -= instance.OnSave;
            @load.started -= instance.OnLoad;
            @load.performed -= instance.OnLoad;
            @load.canceled -= instance.OnLoad;
        }

        public void RemoveCallbacks(ISaveloadActions instance)
        {
            if (m_Wrapper.m_SaveloadActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISaveloadActions instance)
        {
            foreach (var item in m_Wrapper.m_SaveloadActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SaveloadActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SaveloadActions @saveload => new SaveloadActions(this);

    // actions
    private readonly InputActionMap m_actions;
    private List<IActionsActions> m_ActionsActionsCallbackInterfaces = new List<IActionsActions>();
    private readonly InputAction m_actions_shot;
    private readonly InputAction m_actions_taunt;
    private readonly InputAction m_actions_reload;
    public struct ActionsActions
    {
        private @Player_control m_Wrapper;
        public ActionsActions(@Player_control wrapper) { m_Wrapper = wrapper; }
        public InputAction @shot => m_Wrapper.m_actions_shot;
        public InputAction @taunt => m_Wrapper.m_actions_taunt;
        public InputAction @reload => m_Wrapper.m_actions_reload;
        public InputActionMap Get() { return m_Wrapper.m_actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionsActions set) { return set.Get(); }
        public void AddCallbacks(IActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionsActionsCallbackInterfaces.Add(instance);
            @shot.started += instance.OnShot;
            @shot.performed += instance.OnShot;
            @shot.canceled += instance.OnShot;
            @taunt.started += instance.OnTaunt;
            @taunt.performed += instance.OnTaunt;
            @taunt.canceled += instance.OnTaunt;
            @reload.started += instance.OnReload;
            @reload.performed += instance.OnReload;
            @reload.canceled += instance.OnReload;
        }

        private void UnregisterCallbacks(IActionsActions instance)
        {
            @shot.started -= instance.OnShot;
            @shot.performed -= instance.OnShot;
            @shot.canceled -= instance.OnShot;
            @taunt.started -= instance.OnTaunt;
            @taunt.performed -= instance.OnTaunt;
            @taunt.canceled -= instance.OnTaunt;
            @reload.started -= instance.OnReload;
            @reload.performed -= instance.OnReload;
            @reload.canceled -= instance.OnReload;
        }

        public void RemoveCallbacks(IActionsActions instance)
        {
            if (m_Wrapper.m_ActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionsActions @actions => new ActionsActions(this);
    public interface ILocomotionActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnHook(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
    }
    public interface ISaveloadActions
    {
        void OnSave(InputAction.CallbackContext context);
        void OnLoad(InputAction.CallbackContext context);
    }
    public interface IActionsActions
    {
        void OnShot(InputAction.CallbackContext context);
        void OnTaunt(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
    }
}
